<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bibliothèque Musicale - Albums</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
        <style>
            body {
                font-family: 'Poppins', sans-serif;
                background-color: #111;
            }
            
            .navbar.scrolled {
                background-color: #333;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }
            
            .navbar {
                padding: 1rem 0;
                position: fixed;
                width: 100%;
                top: 0;
                z-index: 999;
                background: transparent;
                transition: background-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            }

            .navbar-nav {
                display: flex;
                gap: 1rem;  
                align-items: center;
            }

            .navbar-nav .nav-link {
                color: #fff;
                margin-right: 15px;
                position: relative;
                padding-bottom: 5px;
            }

            .navbar-nav .nav-link.active, 
            .navbar-nav .nav-link:hover {
                color: #f0ad4e;
            }

            .navbar-nav .nav-link::after {
                content: '';
                position: absolute;
                width: 0;
                height: 2px;
                background-color: #f0ad4e;
                bottom: 0;
                left: 50%;
                transition: all 0.3s ease;
            }

            .navbar-nav .nav-link.active::after, 
            .navbar-nav .nav-link:hover::after {
                width: 100%;
                left: 0;
            }

            .navbar-collapse {
                display: flex;
                justify-content: flex-end;
                align-items: center;
            }

            .navbar-nav.main-menu,
            .navbar-nav.auth-menu {
                display: flex;
                align-items: center;
                gap: 1rem;
                margin: 0;
            }

            .navbar-nav.main-menu {
                margin-right: 2rem;
            }

            .navbar-nav .nav-link.active {
                color: #f0ad4e;
            }

            .home-section {
                margin-top: 15vh;
                min-height: 75vh;
            }
            .search-bar {
                margin-bottom: 30px;
            }
            .filters {
                display: flex;
                gap: 15px;
                justify-content: center;
                flex-wrap: wrap;
            }
            .album-grid {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 20px;
            }
            .card {
                width: 250px;
                border-radius: 15px;
                overflow: hidden;
                background-color: #141414;
                border: none;
                box-shadow: 0 4px 15px rgba(255,255,255,0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                position: relative;
            }
            .card:hover {
                transform: translateY(-10px);
                box-shadow: 0px 10px 20px rgba(0,0,0,0.15);
            }
            .card img {
                height: 200px;
                object-fit: cover;
            }
            .card-body {
                background-color: rgb(251 248 248 / 5%) !important;
                color: #fff;
                padding: 15px;
                text-align: center;
                text-shadow: 0 1px 5px rgba(0,0,0,0.7);
            }
            .favorite-icon {
                position: absolute;
                top: 10px;
                right: 10px;
                cursor: pointer;
                z-index: 10;
                color: white;
                text-shadow: 0 1px 5px rgba(0, 0, 0, 0.7);
                font-size: 1.5rem;
                transition: transform 0.3s ease;
            }
            .favorited {
                color: red !important;
            }

            .add-song-btn {
                margin-top: 10px; /* petit écart sous le select artiste */
                display: block;
            }
            .add-song-btn {
                background-color: #28a745;
                color: #fff;
                border: none;
                padding: 10px 20px;
                font-size: 1rem;
                border-radius: 5px;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            .add-song-btn:hover {
                transform: scale(1.1);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            }

            .my-swal-popup {
                display: flex !important;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }

            .swal2-title{
                margin-top: 1vh;
            }

            .swal2-html-container{
                margin-top: 1vh;
                display: flex !important;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }

            .my-swal-popup input,
            .my-swal-popup textarea,
            .my-swal-popup button {
                width: 100%;
                max-width: 400px;
                margin: 5px 0;
            }
            
            .swal2-actions {
                display: flex !important;
                flex-direction: row;
                justify-content: center;
                gap: 10px;
                margin-top: 15px;
            }
            
            #file-name-display {
                margin-top: 5px;
                font-size: 0.9rem;
                color: #fff;
            }
            
            #choose-from-media {
                background-color: #f0ad4e;
                color: #fff;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                cursor: pointer;
                margin-top: 10px;
                width: 100%;
                max-width: 400px;
            }
            
            .media-img.selected {
                border: 3px solid #f0ad4e;
                transform: scale(1.1);
                transition: transform 0.3s, border 0.3s;
            }

            footer {
                background-color: #222;
                color: #fff;
                padding: 20px 0;
                margin-top: 5vh;
                text-align: center;
            }
            @media (max-width: 768px) {
                .filters {
                    flex-direction: column;
                    align-items: center;
                }
            }
        </style>
    </head>
    <body>
        <nav class="navbar navbar-expand-lg navbar-dark">
            <div class="container">
                <a class="navbar-brand" href="{{ path('music_library') }}">Music Library</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('artist_page') }}">Artists</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('album_page') }}">Albums</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('song_page') }}">Songs</a>
                        </li>
                        {% if app.user %}
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person"></i> {{ app.user.username }}
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                    <li><a class="dropdown-item" href="{{ path('profile') }}">Votre profil</a></li>
                                    <li><a class="dropdown-item" href="{{ path('favoris_index') }}">Vos favoris</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                <li class="nav-item">
                                        <a href="{{ path('logout') }}" class="dropdown-item">Logout</a>

                                    </li>

                                </ul>
                            </li>
                        {% else %}
                            <li class="nav-item"><a class="btn-link-custom" href="{{ path('register_form') }}">Register</a></li>
                            <li class="nav-item"><a class="btn-link-custom" href="{{ path('login_form') }}">Login</a></li>
                        {% endif %}
                    </ul>
                </div>
            </div>
        </nav>

        <section id="home" class="home-section">
            <div class="container">
                <div class="row search-bar">
                    <div class="col-md-4">
                        <input type="text" id="album-search" class="form-control" placeholder="Rechercher un album..." value="{{ search }}">
                    </div>
                    <div class="col-md-4">
                        <select id="artist-filter" class="form-select">
                            <option value="">Tous les artistes</option>
                            {% for artist in artists %}
                                <option value="{{ artist.id }}" {% if artist.id == selectedArtist %}selected{% endif %}>{{ artist.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-4">
                        <input type="text" id="date-filter" class="form-control" placeholder="Année ou plage (ex: 2020 ou 2020 2022)" value="{{ date }}">
                    </div>
                    {% if app.user %}
                        <div class="text-center mt-3">
                            <button id="add-album-btn" class="btn btn-success">
                            <i class="bi bi-plus-circle"></i> Ajouter un album
                            </button>
                        </div>
                    {% endif %}
                </div>

                <div class="album-grid" id="album-grid">
                    {% for artistId, albums in albumsWithIndexes %}
                        {% for album in albums %}
                            {% set albumIndex = loop.index %}
                            <div class="card" 
                                data-title="{{ album.title|lower }}"
                                data-artist="{{ album.artist.id }}"
                                data-date="{{ album.date|date('Y') }}">
                                <div class="favorite-icon" data-type="album" data-entity-id="{{ album.id }}">
                                    {% if favoritedAlbumIds is defined and album.id in favoritedAlbumIds %}
                                        <i class="bi bi-heart-fill favorited"></i>
                                    {% else %}
                                        <i class="bi bi-heart"></i>
                                    {% endif %}
                                </div>
                                <img src="/media/{{ album.image }}" class="card-img-top" alt="{{ album.title }}">
                                <div class="card-body">
                                    <h5 class="card-title">{{ album.title }}</h5>
                                    <a href="{{ path('albums_details', { 'artistId': album.artist.id, 'albumIndex': albumIndex }) }}" class="btn btn-primary btn-sm">
                                    Voir plus de détails
                                    </a>
                                </div>
                            </div>
                        {% endfor %}
                    {% endfor %}
                </div>
            </div>
        </section>

        <footer>
            &copy; 2024 Bibliothèque Musicale | Tous droits réservés.
        </footer>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
        <script>
            class AlbumFilter {
                constructor() {
                    this.searchInput = document.getElementById('album-search');
                    this.artistFilter = document.getElementById('artist-filter');
                    this.dateFilter = document.getElementById('date-filter');
                    this.albumGrid = document.getElementById('album-grid');
                    this.initListeners();
                    this.animateElements();
                }

                initListeners() {
                    this.searchInput.addEventListener('input', () => this.filterAlbums());
                    this.artistFilter.addEventListener('change', () => this.filterAlbums());
                    this.dateFilter.addEventListener('input', () => this.filterAlbums());

                    [this.searchInput, this.artistFilter, this.dateFilter].forEach(input => {
                    input.addEventListener('focus', () => gsap.to(input, { scale: 1.05, duration: 0.2 }));
                    input.addEventListener('blur', () => gsap.to(input, { scale: 1, duration: 0.2 }));
                    });
                }

                animateElements() {
                    gsap.from("#album-search", { duration: 0.5, y: -20, opacity: 0, ease: "power1.out" });
                    gsap.from("#artist-filter", { duration: 0.5, y: -20, opacity: 0, ease: "power1.out", delay: 0.1 });
                    gsap.from("#date-filter", { duration: 0.5, y: -20, opacity: 0, ease: "power1.out", delay: 0.2 });
                }

                filterAlbums() {
                    const searchText = this.searchInput.value.toLowerCase();
                    const selectedArtist = this.artistFilter.value;
                    const dateValue = this.dateFilter.value.trim();

                    let startYear = null, endYear = null;
                    if (dateValue) {
                        const parts = dateValue.split(/\s+/);
                        if (parts.length === 1) {
                            startYear = parseInt(parts[0]);
                        } else if (parts.length === 2) {
                            startYear = parseInt(parts[0]);
                            endYear = parseInt(parts[1]);
                        }
                    }

                    const cards = this.albumGrid.querySelectorAll('.card');
                    cards.forEach(card => {
                        const title = card.getAttribute('data-title');
                        const cardArtist = card.getAttribute('data-artist');
                        const cardYear = parseInt(card.getAttribute('data-date'));
                        let visible = true;

                        if (searchText && !title.includes(searchText)) {
                            visible = false;
                        }
                        if (selectedArtist && cardArtist !== selectedArtist) {
                            visible = false;
                        }
                        if (startYear !== null) {
                            if (endYear !== null) {
                                if (cardYear < startYear || cardYear > endYear) {
                                    visible = false;
                                }
                            } else {
                                if (cardYear < startYear) {
                                    visible = false;
                                }
                            }
                        }
                        card.style.display = visible ? 'block' : 'none';
                    });
                }
            }

            const albumFilter = new AlbumFilter();

            window.isAuthenticated = {{ app.user ? 'true' : 'false' }};
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('.favorite-icon').forEach(icon => {
                    icon.addEventListener('click', async function(e) {
                        e.preventDefault();
                        if (!window.isAuthenticated || window.isAuthenticated === 'false') {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Vous devez être connecté pour ajouter aux favoris',
                                toast: true,
                                position: 'bottom-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                            setTimeout(() => {
                                window.location.href = "{{ path('login_form') }}";
                            }, 3000);
                            return;
                        }
                        const type = this.getAttribute('data-type'); // "album"
                        const entityId = this.getAttribute('data-entity-id');
                        try {
                            const formData = new URLSearchParams();
                            formData.append('type', type);
                            formData.append('id', entityId);
                            const response = await fetch("{{ path('favoris_toggle') }}", {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                },
                                body: formData.toString()
                            });
                            const result = await response.json();
                            const iconElem = this.querySelector('i');
                            if (response.ok) {
                                if (result.favorited) {
                                    iconElem.classList.remove('bi-heart');
                                    iconElem.classList.add('bi-heart-fill', 'favorited');
                                    gsap.fromTo(iconElem, { scale: 1 }, { scale: 1.5, duration: 0.2, ease: "power1.out", yoyo: true, repeat: 1 });
                                } else {
                                    iconElem.classList.remove('bi-heart-fill', 'favorited');
                                    iconElem.classList.add('bi-heart');
                                }
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Erreur',
                                    text: result.error || 'Une erreur est survenue',
                                    toast: true,
                                    position: 'bottom-end',
                                    showConfirmButton: false,
                                    timer: 3000
                                });
                            }
                        } catch (error) {
                            console.error('Erreur lors du toggle favoris:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Une erreur est survenue',
                                toast: true,
                                position: 'bottom-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });
            });

            class AlbumAdder {
                constructor() {
                    this.addAlbumBtn = document.getElementById('add-album-btn');
                    if (this.addAlbumBtn) {
                        this.addAlbumBtn.addEventListener('click', this.openAddAlbumModal.bind(this));
                        gsap.fromTo(this.addAlbumBtn, { opacity: 0, y: -20 }, { opacity: 1, y: 0, duration: 0.5 });
                    }
                }

                openAddAlbumModal() {
                    Swal.fire({
                        title: 'Ajouter un album',
                        html: this.getModalHtml(),
                        width: '80%',
                        customClass: { popup: 'swal2-popup my-swal-popup' },
                        focusConfirm: false,
                        showCancelButton: true,
                        confirmButtonText: 'Ajouter',
                        didOpen: () => {
                            gsap.from("#swal-album-title, #swal-date, #swal-artist", { duration: 0.5, y: -10, opacity: 0, stagger: 0.1 });
                            // Téléversement depuis l'ordinateur
                            document.getElementById('upload-album-image-btn').addEventListener('click', () => {
                                document.getElementById('swal-album-image').click();
                            });
                            // Gestion du fichier image
                            const fileInput = document.getElementById('swal-album-image');
                            const fileNameDisplay = document.getElementById('album-file-name-display');
                            fileInput.addEventListener('change', () => {
                                fileNameDisplay.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "Aucun fichier choisi";
                            });
                            // Choix d'image dans la médiathèque
                            document.getElementById('choose-album-image-from-media').addEventListener('click', () => {
                                this.loadAlbumMediaLibrary();
                            });
                        },
                        preConfirm: () => {
                            const title = document.getElementById('swal-album-title').value.trim();
                            if (!title) {
                                Swal.showValidationMessage("Veuillez renseigner le titre de l'album");
                                return false;
                            }
                            const date = document.getElementById('swal-date').value;
                            if (!date) {
                                Swal.showValidationMessage("Veuillez renseigner la date de l'album");
                                return false;
                            }
                            const artistId = document.getElementById('swal-artist').value;
                            if (!artistId) {
                                Swal.showValidationMessage("Veuillez sélectionner un artiste");
                                return false;
                            }
                            const fileInput = document.getElementById('swal-album-image');
                            let formData = new FormData();
                            formData.append('title', title);
                            formData.append('date', date);
                            formData.append('artist', artistId);
                            if (fileInput.files.length > 0) {
                                formData.append('image', fileInput.files[0]);
                            } else {
                                const selectedImage = document.getElementById('album-file-name-display').textContent;
                                if (selectedImage && selectedImage !== "Aucun fichier choisi") {
                                    formData.append('image', selectedImage);
                                }
                            }
                            return formData;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const formData = result.value;
                            fetch("{{ path('album_add') }}", {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.text())
                            .then(text => {
                                if (text === 'success') {
                                    Swal.fire('Album ajouté', '', 'success').then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire('Erreur', text || 'Une erreur est survenue', 'error');
                                }
                            })
                            .catch(err => {
                                Swal.fire('Erreur', 'Une erreur est survenue', 'error');
                            });
                        }
                    });
                }

                getModalHtml() {
                    // Le select est généré à partir de la variable Twig "artists"
                    return `
                        <input type="text" id="swal-album-title" class="swal2-input" placeholder="Titre de l'album" required>
                        <input type="date" id="swal-date" class="swal2-input" required>
                        <select id="swal-artist" class="swal2-input" required>
                            <option value="">Sélectionnez un artiste</option>
                            {% for artist in artists %}
                                <option value="{{ artist.id }}">{{ artist.name }}</option>
                            {% endfor %}
                        </select>
                        <input type="file" id="swal-album-image" class="swal2-input" accept="image/*" style="display:none;">
                        <div id="album-file-name-display">Aucun fichier choisi</div>
                        <button type="button" id="choose-album-image-from-media" class="btn btn-warning">Choisir image depuis la médiathèque</button>
                        <button type="button" id="upload-album-image-btn" class="btn btn-info">Téléverser depuis l'ordinateur</button>
                        <div id="album-media-library-container" style="display:none;"></div>
                    `;
                }

                loadAlbumMediaLibrary() {
                    fetch('/media-list')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("HTTP error " + response.status);
                        }
                        return response.json();
                    })
                    .then(images => {
                        const container = document.getElementById('album-media-library-container');
                        let mediaHtml = '<div style="display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;">';
                        images.forEach(img => {
                            mediaHtml += `<img src="/media/${img}" alt="${img}" class="media-img" style="width: 100px; height: 100px; object-fit: cover; cursor: pointer;">`;
                        });
                        mediaHtml += '</div>';
                        mediaHtml += `
                            <div style="display: flex; justify-content: center; gap: 10px; margin-top: 10px;">
                                <button type="button" id="album-media-valider" class="btn btn-success" style="max-width: 150px;">Valider</button>
                                <button type="button" id="album-media-annuler" class="btn btn-secondary" style="max-width: 150px;">Annuler</button>
                            </div>
                        `;
                        container.innerHTML = mediaHtml;
                        container.style.display = 'block';
                        let selectedUrl = null;
                        container.querySelectorAll('.media-img').forEach(img => {
                            img.addEventListener('click', function() {
                                container.querySelectorAll('.media-img').forEach(i => i.classList.remove('selected'));
                                this.classList.add('selected');
                                selectedUrl = this.getAttribute('src').split('/media/')[1];
                            });
                        });
                        document.getElementById('album-media-valider').addEventListener('click', () => {
                            container.style.display = 'none';
                            const fileNameDisplay = document.getElementById('album-file-name-display');
                            if (selectedUrl) {
                                fileNameDisplay.textContent = selectedUrl;
                            }
                        });
                        document.getElementById('album-media-annuler').addEventListener('click', () => {
                            container.style.display = 'none';
                        });
                    })
                    .catch(err => {
                        console.error(err);
                        Swal.fire('Erreur', 'Impossible de charger la médiathèque', 'error');
                    });
                }
            }

            document.addEventListener('DOMContentLoaded', () => {
                new AlbumAdder();
            });
        </script>
    </body>
</html>
